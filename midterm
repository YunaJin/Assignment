//1.//
import java.util.ArrayList;

public class ReverseEven {
    public static void main(String args[]){

    }
    static void reverseEvenIndices(ArrayList originalList){
        int arrysize= originalList.size();



// No solution? Score (-6)

    }
}

//2.//
public class StaircaseShape {
    public int row(int n) {
        int rowsNumber= (int)((-1 + Math.sqrt(1 + 8 * (long)n)) / 2);
        System.out.println(rowsNumber);
        return rowsNumber;
    }
    public static void main(String args[]){
        StaircaseShape staircaseShape=new StaircaseShape();
        staircaseShape.row(8);
    }
}

//3//
public class MinimumNumber {
    public int minNum(int[] originalList) {

        int result = 0;
        int min = originalList[0];
        int n=originalList.length;

        for (int i = 1; i < n; i++)
        {
            if (originalList[i] < min){
                result += i*(min - originalList[i]);
                min = originalList[i];}
            else
            {
                result += originalList[i] - min;
            }
        }
        System.out.println(result);
        return result;
    }
    public static void main(String args[]){
        MinimumNumber minimumNumber=new MinimumNumber();
        int[]numberList={1,2,3};
        minimumNumber.minNum(numberList);
    }


}
//4//
public class PossibleWays {

    public int numberOfWays(int n, int f, int k){

        int P[][] = new int[n+1][k+1];
        P[0][0] = 1;
        for(int i=1; i <= n; i++){
            for(int j =1; j <= i*f && j <= k ; j++){
                if(j < i){
                    continue;}
                if(j == i){
                    P[i][j] = 1;
                    continue;
                }
                for(int l =1; l <=f ;l++){
                    if(j >= l){
                        P[i][j] += P[i-1][j-l];
                    }
                }
            }
        }
        return P[n][k];
    }

    public static void main(String args[]){
        PossibleWays dtw = new PossibleWays();
        System.out.println(dtw.numberOfWays(4, 5, 5));
    }
}

//5//
class Coor{
        int x;
        int y;
        public Coor (int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    int[] dirX = new int[] {0, 1};
    int[] dirY = new int[] {1, 0};

    public List<List<Integer>> findPath(int[][] matrix) {
        List<List<Integer>> result = new ArrayList<>();
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return result;
        }
        List<List<Coor>> res = new ArrayList<>();
        List<Coor> path = new ArrayList<>();
        path.add(new Cor(0, 0));
        helper(matrix, path, res);
        if (res.size() == 0) {
            return result;
        }
        // we add print the first path
        for (Coor p : res.get(0)) {
            List<Integer> c = new ArrayList<>();
            c.add(p.x);
            c.add(p.y);
            result.add(c);
        }
        return result;
    }

    private void helper(int[][] matrix, List<Coor> path, List<List<Coor>> res) {
        if (path.get(path.size() - 1).x == matrix.length - 1 && path.get(path.size() - 1).y == matrix[0].length - 1) {
            res.add(new ArrayList<>(path));
            return;
        }

        for (int i = 0; i < 2; i++) {
            Coor curr = path.get(path.size() - 1);
            int x = curr.x + dirX[i];
            int y = curr.y + dirY[i];
            if (valid(matrix, x, y) && matrix[x][y] == 1) {
                path.add(new Coor(x, y));
                helper(matrix, path, res);
                path.remove(path.size() - 1);
            }
        }
    }

    private boolean valid(int[][] matrix, int x, int y) {
        if (x < 0 || x >= matrix.length) {
            return false;
        }
        if (y < 0 || y >= matrix[0].length) {
            return false;
        }
        return true;
    }
